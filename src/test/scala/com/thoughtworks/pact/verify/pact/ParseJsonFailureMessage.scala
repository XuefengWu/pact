package com.thoughtworks.pact.verify.pact

import java.io.File

import com.thoughtworks.pact.verify.PactTestService
import org.scalatest.{FlatSpec, Matchers}

/**
  * Created by xfwu on 16/08/2017.
  */
class ParseJsonFailureMessage extends FlatSpec with Matchers {

  "PParseJsonFailure" should "generate friendly short error message" in {
    val message = "     Unexpected character ('&quot;' (code 34)): was expecting comma to separate Object entries\n at [Source: {\n    &quot;provider&quot;: {\n        &quot;name&quot;: &quot;test_provider_array&quot;\n    },\n    &quot;consumer&quot;: {\n        &quot;name&quot;: &quot;test_consumer&quot;\n    },\n    &quot;interactions&quot;: [\n        {\n            &quot;description&quot;:1 &quot;java test interaction with a DSL array body&quot;,\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;GET&quot;,\n                &quot;path&quot;: &quot;/&quot;\n            },\n            &quot;response&quot;: {\n                &quot;status&quot;: 200,\n                &quot;headers&quot;: {\n                    &quot;Content-Type&quot;: &quot;application/json; charset=UTF-8&quot;\n                },\n                &quot;body&quot;: [\n                    {\n                        &quot;dob&quot;: &quot;07/12/2017&quot;,\n                        &quot;id&quot;: 8480334967,\n                        &quot;name&quot;: &quot;Rogger the Dogger&quot;,\n                        &quot;timestamp&quot;: &quot;2017-07-12T19:51:56&quot;\n                    },\n                    {\n                        &quot;dob&quot;: &quot;07/12/2017&quot;,\n                        &quot;id&quot;: 6885210683,\n                        &quot;name&quot;: &quot;Cat in the Hat&quot;,\n                        &quot;timestamp&quot;: &quot;2017-07-12T19:51:56&quot;\n                    }\n                ],\n                &quot;matchingRules&quot;: {\n                    &quot;$.body[0].id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[1].timestamp&quot;: {\n                        &quot;timestamp&quot;: &quot;yyyy-MM-dd'T'HH:mm:ss&quot;\n                    },\n                    &quot;$.body[1].id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[1].dob&quot;: {\n                        &quot;date&quot;: &quot;MM/dd/yyyy&quot;\n                    },\n                    &quot;$.body[0].timestamp&quot;: {\n                        &quot;timestamp&quot;: &quot;yyyy-MM-dd'T'HH:mm:ss&quot;\n                    },\n                    &quot;$.body[0].dob&quot;: {\n                        &quot;date&quot;: &quot;MM/dd/yyyy&quot;\n                    }\n                }\n            }\n        },\n        {\n            &quot;description&quot;: &quot;java test interaction with a DSL array body with templates&quot;,\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;GET&quot;,\n                &quot;path&quot;: &quot;/&quot;\n            },\n            &quot;response&quot;: {\n                &quot;status&quot;: 200,\n                &quot;headers&quot;: {\n                    &quot;Content-Type&quot;: &quot;application/json; charset=UTF-8&quot;\n                },\n                &quot;body&quot;: [\n                    {\n                        &quot;dob&quot;: &quot;2017-07-12&quot;,\n                        &quot;id&quot;: 8379749763,\n                        &quot;name&quot;: &quot;qGqqzGlixalwxVjFZGaJ&quot;\n                    },\n                    {\n                        &quot;dob&quot;: &quot;2017-07-12&quot;,\n                        &quot;id&quot;: 8379749763,\n                        &quot;name&quot;: &quot;qGqqzGlixalwxVjFZGaJ&quot;\n                    },\n                    {\n                        &quot;dob&quot;: &quot;2017-07-12&quot;,\n                        &quot;id&quot;: 8379749763,\n                        &quot;name&quot;: &quot;qGqqzGlixalwxVjFZGaJ&quot;\n                    }\n                ],\n                &quot;matchingRules&quot;: {\n                    &quot;$.body[2].name&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[0].id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[1].id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[1].dob&quot;: {\n                        &quot;date&quot;: &quot;yyyy-MM-dd&quot;\n                    },\n                    &quot;$.body[2].dob&quot;: {\n                        &quot;date&quot;: &quot;yyyy-MM-dd&quot;\n                    },\n                    &quot;$.body[2].id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[1].name&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[0].name&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body[0].dob&quot;: {\n                        &quot;date&quot;: &quot;yyyy-MM-dd&quot;\n                    }\n                }\n            }\n        },\n        {\n            &quot;description&quot;: &quot;java test interaction with an array like matcher&quot;,\n            &quot;request&quot;: {\n                &quot;method&quot;: &quot;GET&quot;,\n                &quot;path&quot;: &quot;/&quot;\n            },\n            &quot;response&quot;: {\n                &quot;status&quot;: 200,\n                &quot;headers&quot;: {\n                    &quot;Content-Type&quot;: &quot;application/json; charset=UTF-8&quot;\n                },\n                &quot;body&quot;: {\n                    &quot;data&quot;: {\n                        &quot;array1&quot;: [\n                            {\n                                &quot;dob&quot;: &quot;2017-07-12&quot;,\n                                &quot;id&quot;: 613313905,\n                                &quot;name&quot;: &quot;ehGKdDIADDeeWpnNiZru&quot;\n                            }\n                        ],\n                        &quot;array2&quot;: [\n                            {\n                                &quot;address&quot;: &quot;127.0.0.1&quot;,\n                                &quot;name&quot;: &quot;AwpSKbcrQCSxKFKBcieW&quot;\n                            }\n                        ],\n                        &quot;array3&quot;: [\n                            [\n                                {\n                                    &quot;itemCount&quot;: 342721542\n                                }\n                            ]\n                        ]\n                    },\n                    &quot;id&quot;: 5177628645\n                },\n                &quot;matchingRules&quot;: {\n                    &quot;$.body.data.array1[*].dob&quot;: {\n                        &quot;date&quot;: &quot;yyyy-MM-dd&quot;\n                    },\n                    &quot;$.body.data.array3[0]&quot;: {\n                        &quot;max&quot;: 5,\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body.data.array1&quot;: {\n                        &quot;min&quot;: 0,\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body.data.array2&quot;: {\n                        &quot;min&quot;: 1,\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body.id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body.data.array3[0][*].itemCount&quot;: {\n                        &quot;match&quot;: &quot;integer&quot;\n                    },\n                    &quot;$.body.data.array2[*].name&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body.data.array2[*].address&quot;: {\n                        &quot;regex&quot;: &quot;(\\\\d{1,3}\\\\.)+\\\\d{1,3}&quot;\n                    },\n                    &quot;$.body.data.array1[*].name&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    },\n                    &quot;$.body.data.array1[*].id&quot;: {\n                        &quot;match&quot;: &quot;type&quot;\n                    }\n                }\n            }\n        }\n    ],\n    &quot;metadata&quot;: {\n        &quot;pact-specification&quot;: {\n            &quot;version&quot;: &quot;2.0.0&quot;\n        }\n    }\n}; line: 10, column: 30] "

    val short = PactTestService.extractParseJsonFailureMessage(message)
    short should be("Unexpected character ('&quot;' (code 34)): was expecting comma to separate Object entries[ line: 10, column: 3]")

  }

}
